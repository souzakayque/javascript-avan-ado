{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","negociacao","getConnection","connection","dao","listaTodos","Error","adiciona","apagaTodos","listaAtual","obterNegociacoesDaSemana","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import { HttpService } from './HttpService';\r\nimport { ConnectionFactory } from './ConnectionFactory';\r\nimport { NegociacaoDao } from '../dao/NegociacaoDao';\r\nimport { Negociacao } from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n    \r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return new Promise((resolve, reject) => {                       \r\n            \r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => \r\n                        new Negociacao (\r\n                            new Date(objeto.data),\r\n                            objeto.quantidade,\r\n                            objeto.valor)))\r\n                        })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana');\r\n                })\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return new Promise((resolve, reject) => {                       \r\n            \r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => \r\n                        new Negociacao (\r\n                            new Date(objeto.data),\r\n                            objeto.quantidade,\r\n                            objeto.valor)))\r\n                        })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana anterior');\r\n                })\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return new Promise((resolve, reject) => {                       \r\n            \r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    resolve(negociacoes.map(objeto => \r\n                        new Negociacao (\r\n                            new Date(objeto.data),\r\n                            objeto.quantidade,\r\n                            objeto.valor)))\r\n                        })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana retrasada');\r\n                })\r\n        });\r\n    }\r\n\r\n    cadastra(negociacao) {\r\n        \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch((erro) => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação');\r\n            });\r\n    }\r\n\r\n    lista() {\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .catch((erro) => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociacções apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações')\r\n            })\r\n    }\r\n\r\n    importa(listaAtual) {\r\n        \r\n        return this.obterNegociacoesDaSemana()\r\n            .then(negociacoes =>\r\n                negociacoes.filter(negociacao =>\r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível buscar negociações para importar');\r\n            })\r\n    }\r\n    \r\n}\r\n"]}